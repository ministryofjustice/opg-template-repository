name: "[Example Workflow]"

on:
  workflow_dispatch:
  pull_request:
    branches: [main]

permissions:
  actions: read
  checks: read
  contents: read
  deployments: none
  issues: none
  packages: none
  pull-requests: read
  repository-projects: none
  security-events: write
  statuses: none


jobs:
  # generate a branch name  
  branch_name:
    name: "Generate a safe branch name"
    uses: ministryofjustice/opg-github-workflows/.github/workflows/data-parse-branch-name.yml@main
  
  # LINTING
  # run linting for terraform
  tf_lint:
    name: "Run terraform linting"
    uses: ministryofjustice/opg-github-workflows/.github/workflows/linting-infrastructure-terraform.yml@main
    with:
      directory: "./terraform"
      terraform_version: "1.1.5"
      terraform_wrapper: false

  # run linting for python
  python_lint:
    name: "Run python linting"
    uses: ministryofjustice/opg-github-workflows/.github/workflows/linting-application-python.yml@main
    with:
      directory: "./service-app"
      python_version: "3.10.2"

  # SAST
  # codeql for pythong
  codeql_analysis:
    name: "Run CodeQL against the code base"
    uses: ministryofjustice/opg-github-workflows/.github/workflows/analysis-application-codeql-sast-to-github-security.yml@main
    with:
      application_languages: '["python"]'
  # tfsec for terraform 
  tfsec_analysis:
    name: "Run TFSec against the code base"
    uses: ministryofjustice/opg-github-workflows/.github/workflows/analysis-infrastructure-tfsec-to-github-security.yml@main
  

  build_scan_push:
    runs-on: ubuntu-latest
    name: "Docker build, trivy scan, ECR push"
    # require all steps before this matrix to have passed
    needs: [branch_name, tf_lint, python_lint, codeql_analysis, tfsec_analysis]
    strategy:
      fail-fast: true
      matrix:
        data:
          - docker_build_directory: "./service-app"
            image_app_name: "helloworld"    
    steps:
      - uses: actions/checkout@v3
      - name: Docker build
        working-directory: ${{ matrix.data.docker_build_directory }}
        run: docker build -t ${{ matrix.data.image_app_name }}:latest .
      - name: Docker image list
        run: docker images
      - name: Trivy scan
        uses: aquasecurity/trivy-action@0.4.1
        working-directory: ${{ matrix.data.docker_build_directory }}
        with:
          image-ref: ${{ matrix.data.image_app_name }}:latest
          severity: "HIGH,CRITICAL"
          format: 'sarif'
          output: ${{ format('trivy-results-{0}.sarif', matrix.data.image_app_name) }}
      - name: Trivy scan upload to github
        uses: github/codeql-action/upload-sarif@v2
        working-directory: ${{ matrix.data.docker_build_directory }}
        if: always()
        with:
          sarif_file: ${{ format('trivy-results-{0}.sarif', matrix.data.image_app_name) }}
      



  # # build containers
  # docker_build:
  #   name: "Build Docker images locally"
  #   needs: [branch_name, codeql_analysis, tfsec_analysis]
  #   uses: ministryofjustice/opg-github-workflows/.github/workflows/build-containers-docker-build.yml@main
  #   with:
  #     image_data: '[{"name":"helloworld1", "directory":"./service-app"}, {"name":"helloworld2", "directory":"./service-app"}]'

  # # dock tests
  # docker_test:
  #   name: "Docker test"
  #   needs: [docker_build]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - run: |
  #         docker images


  # # get a suitable tag
  # create_tag:
  #   name: "Create semvar tag"
  #   needs: [branch_name]
  #   uses: ministryofjustice/opg-github-workflows/.github/workflows/data-parse-semvar-tag.yml@main
  #   with:
  #     branch_name: ${{ needs.branch_name.outputs.raw_branch_name }}
  #   secrets:
  #     source_github_token: ${{ secrets.GITHUB_TOKEN }}




