name: "[Example Workflow]"

on:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: write
  security-events: write
  actions: read
  checks: read
  deployments: none
  issues: none
  packages: none
  pull-requests: read
  repository-projects: none
  statuses: none


jobs:
  # generate a branch name  
  branch_name:
    name: "Generate a safe branch name"
    uses: ministryofjustice/opg-github-workflows/.github/workflows/data-parse-branch-name.yml@main
  
  # generate workspace name
  workspace_name:
    name: "Generate the workspace name"
    uses: ministryofjustice/opg-github-workflows/.github/workflows/data-parse-workspace.yml@main
  
  # generate smevar tag
  semvar_tag:
    name: "Generate the semvar tag value"
    uses: ministryofjustice/opg-github-workflows/.github/workflows/data-parse-semvar-tag.yml@main
    with:
      branch_name: ${{ needs.branch_name.outputs.parsed }}"
    secrets: inherit

  # artificial step to output vars for easier debugging
  variable_generation_completed:
    runs-on: "ubuntu-latest"
    needs: [branch_name, workspace_name, semvar_tag]
    name: "Generated standard variables"
    steps:
      - name: "Output generated variables"
        run: |
          echo "== BRANCH =="
          echo "Raw: ${{ needs.branch_name.outputs.raw }}"
          echo "Parsed: ${{ needs.branch_name.outputs.parsed }}"
          echo "Alphanumeric: ${{ needs.branch_name.outputs.alphanumeric }}"
          echo "== WORKSPACE =="
          echo "Name: ${{ needs.workspace_name.outputs.name }}"
          echo "== SEMVAR =="
          echo "Tag: ${{ needs.semvar_tag.outputs.tag }}"

  # LINTING
  # run linting for terraform
  tf_lint:
    name: "Run terraform linting"
    uses: ministryofjustice/opg-github-workflows/.github/workflows/linting-infrastructure-terraform.yml@main
    with:
      directory: "./terraform"
      terraform_version: "1.1.5"
      terraform_wrapper: false

  # run linting for python
  python_lint:
    name: "Run python linting"
    uses: ministryofjustice/opg-github-workflows/.github/workflows/linting-application-python.yml@main
    with:
      directory: "./service-app"
      python_version: "3.10.2"

  # SAST
  # codeql for pythong
  codeql_analysis:
    name: "Run CodeQL against the code base"
    uses: ministryofjustice/opg-github-workflows/.github/workflows/analysis-application-codeql-sast-to-github-security.yml@main
    with:
      application_languages: '["python"]'
  # tfsec for terraform 
  tfsec_analysis:
    name: "Run TFSec against the code base"
    uses: ministryofjustice/opg-github-workflows/.github/workflows/analysis-infrastructure-tfsec-to-github-security.yml@main
  
  # Docker build, trivy scan, ECR push as a matrix
  # The matrix loops over each app to build in a complicated
  # structure
  # ADD IN ECR PUSH
  build_scan_push:
    name: "Docker build, trivy scan, ECR push"
    runs-on: ubuntu-latest
    # require all steps before this matrix to have passed
    needs: [branch_name, workspace_name, semvar_tag, variable_generation_completed, tf_lint, python_lint, codeql_analysis, tfsec_analysis]
    strategy:
      fail-fast: true
      matrix:
        # services to scan over
        data:
          - docker_build_directory: "./service-app"
            image_app_name: "helloworld"    
    # we use these a few times, so its easier to generate them once and env
    # vars are visible in the output, so helps with debug
    env:
      local_docker_image: ${{ matrix.data.image_app_name }}:latest
      sarif_file: trivy-results.sarif
    steps:
      - uses: actions/checkout@v3
      - name: Show environment values
        run: |
          echo "local_docker_image: ${{ env.local_docker_image }}"
          echo "sarif_file: ${{ env.sarif_file }}"
      # build our sample docker image
      - name: Docker build
        # set the working directory to the variable
        working-directory: ${{ matrix.data.docker_build_directory }}
        run: |
          docker build -t ${{ env.local_docker_image }} .
      # to check if things worked, output docker image list
      - name: Docker image list
        run: |
          docker images
      - name: Trivy scan
        uses: aquasecurity/trivy-action@0.6.2
        with:
          image-ref: ${{ env.local_docker_image }}
          severity: "HIGH,CRITICAL"
          format: 'sarif'
          output: ${{ env.sarif_file }}
      - name: Trivy scan upload to github
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: ${{ env.sarif_file }}
      # for a lot of our services, there could be a test process here before things are
      # pushed to ECR, but this will vary a lot

      
  # example terraform build stage
  terraform_account_build:
    name: "Terraform Account Plan and Apply"
    needs: [workspace_name, semvar_tag, build_scan_push]
    uses: ministryofjustice/opg-github-workflows/.github/workflows/build-infrastructure-terraform.yml@main
    with:
      semvar_tag: "${{ needs.semvar_tag.outputs.tag }}"

      terraform_version: "1.1.5"
      terraform_directory: "./terraform/account"
      terraform_apply: true
      # this would be replaced with the dynamic value from needs.workspace_name.output.name
      # but we're just using sandbox account and single env, so use default
      terraform_workspace: "default" 
      # normally would need some logic to decide this based on branch name etc
      # - if its true we would then need to pass workspace_manager_aws_account_id & 
      #   workspace_manager_aws_iam_role as well
      is_ephemeral: false
    secrets:
      AWS_ACCESS_KEY_ID_ACTIONS: ${{ secrets.AWS_ACCESS_KEY_ID_ACTIONS }}
      AWS_SECRET_ACCESS_KEY_ACTIONS: ${{ secrets.AWS_SECRET_ACCESS_KEY_ACTIONS }}

  end:
    name: 'End of workflow'
    runs-on: 'ubuntu-latest'
    needs: [branch_name, workspace_name, semvar_tag, variable_generation_completed, build_scan_push, terraform_account_build]
    steps:
      - name: "Output data"
        run: |
          echo "== BRANCH =="
          echo "Raw: ${{ needs.branch_name.outputs.raw }}"
          echo "Parsed: ${{ needs.branch_name.outputs.parsed }}"
          echo "Alphanumeric: ${{ needs.branch_name.outputs.alphanumeric }}"
          echo "== WORKSPACE =="
          echo "Name: ${{ needs.workspace_name.outputs.name }}"
          echo "== SEMVAR =="
          echo "Tag: ${{ needs.semvar_tag.outputs.tag }}"
          



